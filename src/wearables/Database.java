//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.11.09 at 12:05:08 PM GMT 
//


package wearables;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for Database complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Database">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="Product" type="{}Product" maxOccurs="unbounded"/>
 *         &lt;element name="Store" type="{}Store" maxOccurs="unbounded"/>
 *         &lt;element name="Availability" type="{}Availability" maxOccurs="unbounded"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * This database holds all elements stored in the Wearables
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Database", propOrder = {
    "product",
    "store",
    "availability"
})
public class Database {

    @XmlElement(name = "Product", required = true)
    protected List<Product> product;
    @XmlElement(name = "Store", required = true)
    protected List<Store> store;
    @XmlElement(name = "Availability", required = true)
    protected List<Availability> availability;

    
    public List<Product> getProducts() {
        if (product == null) {
            product = new ArrayList<Product>();
        }
        return this.product;
    }


    public List<Store> getStores() {
        if (store == null) {
            store = new ArrayList<Store>();
        }
        return this.store;
    }

    public List<Availability> getAvailability() {
        if (availability == null) {
            availability = new ArrayList<Availability>();
        }
        return this.availability;
    }
    
    public Product getProdById(BigInteger id) {
    	Product prodFound = null;
    	for	(int i = 0; i < product.size(); i++){
    		if(product.get(i).getId() == id){
    			prodFound = product.get(i);
    			break;
    		}
    	}
    	return prodFound;
    }
    
    public Store getStoreById(BigInteger id) {
    	Store storeFound = null;
    	for	(int i = 0; i < store.size(); i++){
    		if(store.get(i).getId() == id){
    			storeFound = store.get(i);
    			break;
    		}
    	}
    	return storeFound;
    }
    
    public BigInteger getProdStockInStore(BigInteger prodId, BigInteger storeId) {
    	BigInteger stock = BigInteger.valueOf(0);
    	for	(int i = 0; i < availability.size(); i++){
    		//If same prodId and same store
    		if(availability.get(i).getProductId().compareTo(prodId) == 0 && 
    				availability.get(i).getStoreId().compareTo(storeId) == 0){
    			stock = availability.get(i).getQuantity();
    			break;
    		}
    	}
    	return stock;
    }
    
    public List<Store> getStoresWhereProdIsAvailable(BigInteger prodId) {
    	List<Store> stores = new ArrayList<Store>();
    	BigInteger zero = BigInteger.valueOf(0);
    	BigInteger storeId;
    	for	(int i = 0; i < availability.size(); i++){
    		// If same prodId and quantity > 0
    		if(availability.get(i).getProductId().compareTo(prodId) == 0 && 
    				availability.get(i).getQuantity().compareTo(zero) > 0){
    			storeId = availability.get(i).getStoreId();
    			stores.add(getStoreById(storeId));
    		}
    	}
    	return stores;
    }
    
    public List<Product> getStoreProducts(BigInteger storeId) {
    	List<Product> products = new ArrayList<Product>();
    	BigInteger zero = BigInteger.valueOf(0);
    	BigInteger prodId;
    	for	(int i = 0; i < availability.size(); i++){
    		// If same storedId and quantity > 0
    		if(availability.get(i).getStoreId().compareTo(storeId) == 0 && 
    				availability.get(i).getQuantity().compareTo(zero) > 0){
    			prodId = availability.get(i).getProductId();
    			products.add(getProdById(prodId));
    		}
    	}
    	return products;
    }

}
